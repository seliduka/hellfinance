library(tidyquant)
library(lubridate)
HU <- getSymbols("^TWII", auto.assign = FALSE, from = "2017-01-01")
HU <- HU[(rowSums(is.na(HU)) == 0), ]
HU <- tail(HU, n = 100)
HU <- round(HU, digits = 2)
HU <- as.data.frame(HU)
HU <- cbind(date = rownames(HU), HU)
names = gsub("^.....(.*$)", "\\1", names(HU))#點數等於字數
names(HU) <- tolower(names)
rownames(HU) <- 1:nrow(HU)
HU <- cbind(symbol = "GG", HU)
HU$date <- as.Date(HU$date, format =  "%Y-%m-%d")
HU <- as.tibble(HU)
FANG_macd <- HU %>%
group_by(symbol) %>%
tq_mutate(select     = close,
mutate_fun = MACD,
nFast      = 12,
nSlow      = 26,
nSig       = 9,
maType     = SMA) %>%
mutate(diff = macd - signal) %>%
select(-(open:volume))
FANG_macd
FANG_macd %>%
filter(date >= as_date("2020-01-01")) %>%
ggplot(aes(x = date)) +
geom_hline(yintercept = 0, color = palette_light()[[1]]) +
geom_line(aes(y = macd, col = symbol)) +
geom_line(aes(y = signal), color = "blue", linetype = 2) +
geom_bar(aes(y = diff), stat = "identity", color = palette_light()[[1]]) +
facet_wrap(~ symbol, ncol = 2, scale = "free_y") +
labs(title = "Moving Average Convergence Divergence",
y = "MACD", x = "", color = "") +
theme_tq() +
scale_color_tq()
library(rvest) # 爬蟲相關套件
library(httr) # 爬蟲相關套件
library(dplyr) # 非常強大的資料處理套件
library(lubridate) # 處理日期變數的套件
library(stringr) # 處理字串的套件
library(xlsx)
#######################################
getOption('timeout')
options(timeout=100)
url <- "https://www.taifex.com.tw/cht/3/totalTableDate"
html <- read_html(url, encoding = "UTF-8")
html_name(html)
html_attrs(html)
html_attr(html, "div")
cast <- html_nodes(html, "td:nth-child(7) b")
cast <- gsub("[^-0-9+]", "\\1", cast[1])
cast <- data.frame(date = today(), numb = cast)
#write.xlsx(cast, file = "more.xlsx", sheetName = "Sheet1", col.names = TRUE, row.names = TRUE, append = FALSE)
df <- read.xlsx("more.xlsx",sheetName = "Sheet1" )
df$NA. <- NULL
write.xlsx(rbind(df, cast), file = "more.xlsx", sheetName = "Sheet1", col.names = TRUE, row.names = TRUE, append = FALSE)
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
library(tidyverse)
library(tidyquant)
library(lubridate)
library(Cairo)
library(showtext)
library(readxl)
library(xlsx)
showtext_auto(enable=T)
thexml <- read.xlsx("more.xlsx",sheetName = "Sheet1" )
thexml$NA. <- NULL
thexml$date <- as.Date(thexml$date, format =  "%Y-%m-%d")
#thexml <- thexml[-c(14),]
dday <- nrow(thexml)
thexml$numb <- as.numeric(thexml$numb)
ggplot(thexml, aes(x=date)) + geom_line(aes(y = numb), color = "darkred")
plot(thexml)
HU <- getSymbols("^TWII", auto.assign = FALSE, from = "2017-01-01")
HU <- HU[(rowSums(is.na(HU)) == 0), ]
HU <- tail(HU, n = dday)
HU <- round(HU, digits = 2)
HU <- as.data.frame(HU)
HU <- cbind(date = rownames(HU), HU)
names(HU) <- tolower(names)
names = gsub("^.....(.*$)", "\\1", names(HU))#點數等於字數
rownames(HU) <- 1:nrow(HU)
HU <- cbind(symbol = "GG", HU)
HU$date <- as.Date(HU$date, format =  "%Y-%m-%d")
HU <- as.tibble(HU)
thexml$move <- ((HU$close-HU$low))*100
#thexml$close <- (HU$close-16500)*50
thexml$don <- ((HU$high-HU$low)-200)*100
thexml$up <- ((HU$close-HU$open)-200)*100
thexml$go <- (HU$open-16500)*50
cor.test(thexml$numb,thexml$move)
ggplot(thexml, aes(x=date)) +
geom_line(aes(y = numb), color = "darkred", group = 1) +
# geom_line(aes(x = date, y = GG), color = "green", group = 1) +
# geom_line(aes(x = date, y = don), color = "chocolate2", group = 1) +
# geom_line(aes(x = date, y = go), color = "cyan1", group = 1) +
#  geom_line(aes(x = date, y = up), color = "plum2", group = 1)
geom_line(aes(x = date-2, y = move), color = "blue", group = 1) +
ggtitle("foreign investment LS & close-low \n relationship lines")
#HU$move <- (HU$close-HU$low)*10
#HU$move <- (HU$close-HU$low)*10
#ggplot(HU, aes(x=date)) +
#HU$move <- (HU$close-HU$low)*10
#ggplot(HU, aes(x=date)) +
#  geom_line(aes(y = move), color = "blue")
#HU$move <- (HU$close-HU$low)*10
#ggplot(HU, aes(x=date)) +
#  geom_line(aes(y = move), color = "blue")
#HU$move <- (HU$close-HU$low)*10
#ggplot(HU, aes(x=date)) +
#  geom_line(aes(y = move), color = "blue")
#HU$move <- (HU$close-HU$low)*10
#ggplot(HU, aes(x=date)) +
#  geom_line(aes(y = move), color = "blue")
#HU$move <- (HU$close-HU$low)*10
#ggplot(HU, aes(x=date)) +
#  geom_line(aes(y = move), color = "blue")
#HU$move <- (HU$close-HU$low)*10
#ggplot(HU, aes(x=date)) +
#  geom_line(aes(y = move), color = "blue")
#HU$move <- (HU$close-HU$low)*10
#ggplot(HU, aes(x=date)) +
#  geom_line(aes(y = move), color = "blue")
#HU$move <- (HU$close-HU$low)*10
#ggplot(HU, aes(x=date)) +
#  geom_line(aes(y = move), color = "blue")
#HU$move <- (HU$close-HU$low)*10
#ggplot(HU, aes(x=date)) +
#  geom_line(aes(y = move), color = "blue")
#HU$move <- (HU$close-HU$low)*10
#ggplot(HU, aes(x=date)) +
#  geom_line(aes(y = move), color = "blue")
library(tidyverse)
library(tidyquant)
library(lubridate)
HU <- getSymbols("^TWII", auto.assign = FALSE, from = "2017-01-01")
HU <- HU[(rowSums(is.na(HU)) == 0), ]
HU <- tail(HU, n = 100)
HU <- round(HU, digits = 2)
HU <- as.data.frame(HU)
HU <- cbind(date = rownames(HU), HU)
names = gsub("^.....(.*$)", "\\1", names(HU))#點數等於字數
names(HU) <- tolower(names)
rownames(HU) <- 1:nrow(HU)
HU <- cbind(symbol = "GG", HU)
HU$date <- as.Date(HU$date, format =  "%Y-%m-%d")
HU <- as.tibble(HU)
FANG_macd <- HU %>%
group_by(symbol) %>%
tq_mutate(select     = close,
mutate_fun = MACD,
nFast      = 12,
nSlow      = 26,
nSig       = 9,
maType     = SMA) %>%
mutate(diff = macd - signal) %>%
select(-(open:volume))
FANG_macd
FANG_macd %>%
filter(date >= as_date("2020-01-01")) %>%
ggplot(aes(x = date)) +
geom_hline(yintercept = 0, color = palette_light()[[1]]) +
geom_line(aes(y = macd, col = symbol)) +
geom_line(aes(y = signal), color = "blue", linetype = 2) +
geom_bar(aes(y = diff), stat = "identity", color = palette_light()[[1]]) +
facet_wrap(~ symbol, ncol = 2, scale = "free_y") +
labs(title = "Moving Average Convergence Divergence",
y = "MACD", x = "", color = "") +
theme_tq() +
scale_color_tq()
library(tidyverse)
library(tidyquant)
library(lubridate)
HU <- getSymbols("^TWII", auto.assign = FALSE, from = "2017-01-01")
HU <- HU[(rowSums(is.na(HU)) == 0), ]
HU <- tail(HU, n = 100)
HU <- round(HU, digits = 2)
HU <- as.data.frame(HU)
HU <- cbind(date = rownames(HU), HU)
names = gsub("^.....(.*$)", "\\1", names(HU))#點數等於字數
names(HU) <- tolower(names)
rownames(HU) <- 1:nrow(HU)
HU <- cbind(symbol = "GG", HU)
HU$date <- as.Date(HU$date, format =  "%Y-%m-%d")
HU <- as.tibble(HU)
FANG_macd <- HU %>%
group_by(symbol) %>%
tq_mutate(select     = close,
mutate_fun = MACD,
nFast      = 12,
nSlow      = 26,
nSig       = 9,
maType     = SMA) %>%
mutate(diff = macd - signal) %>%
select(-(open:volume))
FANG_macd
FANG_macd %>%
filter(date >= as_date("2020-01-01")) %>%
ggplot(aes(x = date)) +
geom_hline(yintercept = 0, color = palette_light()[[1]]) +
geom_line(aes(y = macd, col = symbol)) +
geom_line(aes(y = signal), color = "blue", linetype = 2) +
geom_bar(aes(y = diff), stat = "identity", color = palette_light()[[1]]) +
facet_wrap(~ symbol, ncol = 2, scale = "free_y") +
labs(title = "Moving Average Convergence Divergence",
y = "MACD", x = "", color = "") +
theme_tq() +
scale_color_tq()
library(rvest) # 爬蟲相關套件
library(httr) # 爬蟲相關套件
library(dplyr) # 非常強大的資料處理套件
library(lubridate) # 處理日期變數的套件
library(stringr) # 處理字串的套件
library(xlsx)
#######################################
getOption('timeout')
options(timeout=100)
url <- "https://www.taifex.com.tw/cht/3/totalTableDate"
html <- read_html(url, encoding = "UTF-8")
html_name(html)
html_attrs(html)
html_attr(html, "div")
cast <- html_nodes(html, "td:nth-child(7) b")
cast <- gsub("[^-0-9+]", "\\1", cast[1])
cast <- data.frame(date = today(), numb = cast)
#write.xlsx(cast, file = "more.xlsx", sheetName = "Sheet1", col.names = TRUE, row.names = TRUE, append = FALSE)
df <- read.xlsx("more.xlsx",sheetName = "Sheet1" )
df$NA. <- NULL
write.xlsx(rbind(df, cast), file = "more.xlsx", sheetName = "Sheet1", col.names = TRUE, row.names = TRUE, append = FALSE)
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
library(rvest) # 爬蟲相關套件
library(httr) # 爬蟲相關套件
library(dplyr) # 非常強大的資料處理套件
library(lubridate) # 處理日期變數的套件
library(stringr) # 處理字串的套件
library(xlsx)
#######################################
getOption('timeout')
options(timeout=100)
url <- "https://www.taifex.com.tw/cht/3/totalTableDate"
html <- read_html(url, encoding = "UTF-8")
html_name(html)
html_attrs(html)
html_attr(html, "div")
cast <- html_nodes(html, "td:nth-child(7) b")
cast <- gsub("[^-0-9+]", "\\1", cast[1])
cast <- data.frame(date = today(), numb = cast)
#write.xlsx(cast, file = "more.xlsx", sheetName = "Sheet1", col.names = TRUE, row.names = TRUE, append = FALSE)
df <- read.xlsx("more.xlsx",sheetName = "Sheet1" )
df$NA. <- NULL
write.xlsx(rbind(df, cast), file = "more.xlsx", sheetName = "Sheet1", col.names = TRUE, row.names = TRUE, append = FALSE)
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
library(rvest) # 爬蟲相關套件
library(httr) # 爬蟲相關套件
library(dplyr) # 非常強大的資料處理套件
library(lubridate) # 處理日期變數的套件
library(stringr) # 處理字串的套件
library(xlsx)
#######################################
getOption('timeout')
options(timeout=100)
url <- "https://www.taifex.com.tw/cht/3/totalTableDate"
html <- read_html(url, encoding = "UTF-8")
html_name(html)
html_attrs(html)
html_attr(html, "div")
cast <- html_nodes(html, "td:nth-child(7) b")
cast <- gsub("[^-0-9+]", "\\1", cast[1])
cast <- data.frame(date = today(), numb = cast)
#write.xlsx(cast, file = "more.xlsx", sheetName = "Sheet1", col.names = TRUE, row.names = TRUE, append = FALSE)
df <- read.xlsx("more.xlsx",sheetName = "Sheet1" )
df$NA. <- NULL
write.xlsx(rbind(df, cast), file = "more.xlsx", sheetName = "Sheet1", col.names = TRUE, row.names = TRUE, append = FALSE)
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
library(tidyverse)
library(tidyquant)
library(lubridate)
HU <- getSymbols("^TWII", auto.assign = FALSE, from = "2017-01-01")
HU <- HU[(rowSums(is.na(HU)) == 0), ]
HU <- tail(HU, n = 100)
HU <- round(HU, digits = 2)
HU <- as.data.frame(HU)
HU <- cbind(date = rownames(HU), HU)
names = gsub("^.....(.*$)", "\\1", names(HU))#點數等於字數
names(HU) <- tolower(names)
rownames(HU) <- 1:nrow(HU)
HU <- cbind(symbol = "GG", HU)
HU$date <- as.Date(HU$date, format =  "%Y-%m-%d")
HU <- as.tibble(HU)
FANG_macd <- HU %>%
group_by(symbol) %>%
tq_mutate(select     = close,
mutate_fun = MACD,
nFast      = 12,
nSlow      = 26,
nSig       = 9,
maType     = SMA) %>%
mutate(diff = macd - signal) %>%
select(-(open:volume))
FANG_macd
FANG_macd %>%
filter(date >= as_date("2020-01-01")) %>%
ggplot(aes(x = date)) +
geom_hline(yintercept = 0, color = palette_light()[[1]]) +
geom_line(aes(y = macd, col = symbol)) +
geom_line(aes(y = signal), color = "blue", linetype = 2) +
geom_bar(aes(y = diff), stat = "identity", color = palette_light()[[1]]) +
facet_wrap(~ symbol, ncol = 2, scale = "free_y") +
labs(title = "Moving Average Convergence Divergence",
y = "MACD", x = "", color = "") +
theme_tq() +
scale_color_tq()
library(tidyverse)
library(tidyquant)
library(lubridate)
HU <- getSymbols("^TWII", auto.assign = FALSE, from = "2017-01-01")
HU <- HU[(rowSums(is.na(HU)) == 0), ]
HU <- tail(HU, n = 100)
HU <- round(HU, digits = 2)
HU <- as.data.frame(HU)
HU <- cbind(date = rownames(HU), HU)
names = gsub("^.....(.*$)", "\\1", names(HU))#點數等於字數
names(HU) <- tolower(names)
rownames(HU) <- 1:nrow(HU)
HU <- cbind(symbol = "GG", HU)
HU$date <- as.Date(HU$date, format =  "%Y-%m-%d")
HU <- as.tibble(HU)
FANG_macd <- HU %>%
group_by(symbol) %>%
tq_mutate(select     = close,
mutate_fun = MACD,
nFast      = 12,
nSlow      = 26,
nSig       = 9,
maType     = SMA) %>%
mutate(diff = macd - signal) %>%
select(-(open:volume))
FANG_macd
FANG_macd %>%
filter(date >= as_date("2020-01-01")) %>%
ggplot(aes(x = date)) +
geom_hline(yintercept = 0, color = palette_light()[[1]]) +
geom_line(aes(y = macd, col = symbol)) +
geom_line(aes(y = signal), color = "blue", linetype = 2) +
geom_bar(aes(y = diff), stat = "identity", color = palette_light()[[1]]) +
facet_wrap(~ symbol, ncol = 2, scale = "free_y") +
labs(title = "Moving Average Convergence Divergence",
y = "MACD", x = "", color = "") +
theme_tq() +
scale_color_tq()
library(rvest) # 爬蟲相關套件
library(httr) # 爬蟲相關套件
library(dplyr) # 非常強大的資料處理套件
library(lubridate) # 處理日期變數的套件
library(stringr) # 處理字串的套件
library(xlsx)
#######################################
getOption('timeout')
options(timeout=100)
url <- "https://www.taifex.com.tw/cht/3/totalTableDate"
html <- read_html(url, encoding = "UTF-8")
html_name(html)
html_attrs(html)
html_attr(html, "div")
cast <- html_nodes(html, "td:nth-child(7) b")
cast <- gsub("[^-0-9+]", "\\1", cast[1])
cast <- data.frame(date = today(), numb = cast)
#write.xlsx(cast, file = "more.xlsx", sheetName = "Sheet1", col.names = TRUE, row.names = TRUE, append = FALSE)
df <- read.xlsx("more.xlsx",sheetName = "Sheet1" )
df$NA. <- NULL
write.xlsx(rbind(df, cast), file = "more.xlsx", sheetName = "Sheet1", col.names = TRUE, row.names = TRUE, append = FALSE)
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
爬蟲相關套件
爬蟲相關套件
爬蟲相關套件
爬蟲相關套件
爬蟲相關套件
爬蟲相關套件
爬蟲相關套件
library(rvest) # 爬蟲相關套件
library(httr) # 爬蟲相關套件
library(dplyr) # 非常強大的資料處理套件
library(lubridate) # 處理日期變數的套件
library(stringr) # 處理字串的套件
library(xlsx)
#######################################
getOption('timeout')
options(timeout=100)
url <- "https://www.taifex.com.tw/cht/3/totalTableDate"
html <- read_html(url, encoding = "UTF-8")
html_name(html)
html_attrs(html)
html_attr(html, "div")
cast <- html_nodes(html, "td:nth-child(7) b")
cast <- gsub("[^-0-9+]", "\\1", cast[1])
cast <- data.frame(date = today(), numb = cast)
#write.xlsx(cast, file = "more.xlsx", sheetName = "Sheet1", col.names = TRUE, row.names = TRUE, append = FALSE)
df <- read.xlsx("more.xlsx",sheetName = "Sheet1" )
df$NA. <- NULL
write.xlsx(rbind(df, cast), file = "more.xlsx", sheetName = "Sheet1", col.names = TRUE, row.names = TRUE, append = FALSE)
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
library(rvest) # 爬蟲相關套件
library(httr) # 爬蟲相關套件
library(dplyr) # 非常強大的資料處理套件
library(lubridate) # 處理日期變數的套件
library(stringr) # 處理字串的套件
library(xlsx)
#######################################
getOption('timeout')
options(timeout=100)
url <- "https://www.taifex.com.tw/cht/3/totalTableDate"
html <- read_html(url, encoding = "UTF-8")
html_name(html)
html_attrs(html)
html_attr(html, "div")
cast <- html_nodes(html, "td:nth-child(7) b")
cast <- gsub("[^-0-9+]", "\\1", cast[1])
cast <- data.frame(date = today(), numb = cast)
#write.xlsx(cast, file = "more.xlsx", sheetName = "Sheet1", col.names = TRUE, row.names = TRUE, append = FALSE)
df <- read.xlsx("more.xlsx",sheetName = "Sheet1" )
df$NA. <- NULL
write.xlsx(rbind(df, cast), file = "more.xlsx", sheetName = "Sheet1", col.names = TRUE, row.names = TRUE, append = FALSE)
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
#每上班日下午14:10分自動執行
library(tidyverse)
library(tidyquant)
library(lubridate)
HU <- getSymbols("^TWII", auto.assign = FALSE, from = "2017-01-01")
HU <- HU[(rowSums(is.na(HU)) == 0), ]
HU <- tail(HU, n = 100)
HU <- round(HU, digits = 2)
HU <- as.data.frame(HU)
HU <- cbind(date = rownames(HU), HU)
names = gsub("^.....(.*$)", "\\1", names(HU))#點數等於字數
names(HU) <- tolower(names)
rownames(HU) <- 1:nrow(HU)
HU <- cbind(symbol = "GG", HU)
HU$date <- as.Date(HU$date, format =  "%Y-%m-%d")
HU <- as.tibble(HU)
FANG_macd <- HU %>%
group_by(symbol) %>%
tq_mutate(select     = close,
mutate_fun = MACD,
nFast      = 12,
nSlow      = 26,
nSig       = 9,
maType     = SMA) %>%
mutate(diff = macd - signal) %>%
select(-(open:volume))
FANG_macd
FANG_macd %>%
filter(date >= as_date("2020-01-01")) %>%
ggplot(aes(x = date)) +
geom_hline(yintercept = 0, color = palette_light()[[1]]) +
geom_line(aes(y = macd, col = symbol)) +
geom_line(aes(y = signal), color = "blue", linetype = 2) +
geom_bar(aes(y = diff), stat = "identity", color = palette_light()[[1]]) +
facet_wrap(~ symbol, ncol = 2, scale = "free_y") +
labs(title = "Moving Average Convergence Divergence",
y = "MACD", x = "", color = "") +
theme_tq() +
scale_color_tq()
